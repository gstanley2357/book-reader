Prompts

ai: claude
prompt: Generate a document reader application. book-reader-ui.png has the user interface I want.
The main central pane:
  This is where the document I'm reading is shown.
  Documents can be text, pdf, or a web page.
  There needs to be controls for navigating through the document.
  The text is selectable.
The left outline pane:
  This contains an outline or table of contents for the document.
  It also has a master list of all of the definitions.
  When a node or definition is clicked, the document will scroll to that location.
The right pane:
  This contains the data for the selected text.
  That data includes:
    A list of definitions of the selected text. Definitions also have a context connected with them.
    Links to web pages or files that serve as references for the selected text.
    Notes that are attached to the selected text.
    The type of the selected text. Examples are source code, programming term, identifier, operator.
    The location and range of the selected text.
Actions:
  Select text.
  Add, delete, or change a definition.
  Change the definition context.
  Add a new document to the database.
  Add, delete, or change a link.
  Add, delete, or change a note.
  Change the type of the selected text.
  Create a synonym for the selected text.
  The document's text is highlighted if it can be found in the database.
The selected text is the main object of the system. It is unique in the database. When a definition, link, location or other
data is attached to the selected text, it is to that unique data. Selected text can be one word or symbol or it can be multiple words.
Selected text can have synonyms. In that case, attached data is shared between all the synonyms.
The application should be written in ruby on rails. Data should be stored in a sqlite database.

Please generate the basic application framework, but do not implement operational details. Instead, create a task list with
implementation steps as fine-grained as possible (baby steps).
response: I've created a comprehensive Ruby on Rails document reader application framework along with an extremely detailed implementation task list. Here's what I've provided:

## Application Framework Features:

1. **Complete MVC Structure**:
   - 8 models with proper associations and validations
   - Controllers for all CRUD operations
   - RESTful routes with nested resources
   - API endpoints for AJAX operations

2. **Database Schema**:
   - Documents table for storing various document types
   - Document outlines for table of contents
   - Selected texts as the core unique entities
   - Definitions, links, notes, and synonyms attached to selected texts
   - Document locations for tracking text positions

3. **Three-Pane UI Structure**:
   - Left pane: Document outline and master definitions list
   - Center pane: Document content with navigation controls
   - Right pane: Selected text details and management

4. **Key Features Included**:
   - Text selection and highlighting system
   - Definition, link, and note management
   - Synonym support with shared data
   - Document navigation and zoom controls
   - AJAX-driven interactions

## Implementation Task List:

The task list is organized into 15 phases with 200+ granular tasks covering:

- **Infrastructure**: Rails setup, database migrations, basic MVC
- **Core Features**: Document processing, text selection, outline generation
- **Advanced Features**: Highlighting, search, export/import
- **Quality Assurance**: Testing, security, performance optimization
- **Deployment**: Documentation, deployment, post-launch support

Each task is designed to be a "baby step" that can be completed in a few hours to a day, making the project manageable and allowing for incremental progress tracking.

The estimated timeline is 16-25 weeks depending on scope and team size, with built-in risk mitigation strategies and quality standards.

This framework provides a solid foundation for building the document reader application exactly as described in your requirements, with the flexibility to add more advanced features as needed.